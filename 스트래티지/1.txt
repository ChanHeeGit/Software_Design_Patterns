퀴즈1
Revision2 의 장단점
장점 : 새로운 것을 추가하는 것은 쉽다.
상속과 오버라이딩을 사용하면 공통된 행동은 쉽게 재사용이 가능하다.
모든 오리의 공통 행동의 재사용이 용이하다.
새로운 종류 오리의 추가가 용이하다.
오리가 가질 수 있는 행동의 종류를 알기 쉽다.

단점 : fly와 같이 공통적이지 않은 메소드를 추가하게 되면 서브클래스들 모두에게 영향을 준다.
지저분하다. 유지보수성이 나쁘다.
Duck 서브클래스에서 코드가 중복될 수 있다.
Duck 서브클래스의 정의만 보고는 오리들 사이의 행동 차이를 구분하기 힘든 경우가 있다. (quack, fly 메소드 이름은 동일하지만 내용은 다르다)
Duck 클래스의 변경이 Duck의 서브클래스에 원치 않는 영향을 끼칠 수 있다.(제일 큰 문제점)

퀴즈2
Revision3의 장단점

인터페이스는 추상메소드 각자가 메소드 정의해주어야한다.
인터페이스 나타낼때 : 점선표시
장점: 모든 오리의 공통 행동의 재사용이 용이하다.
새로운 종류 오리의 추가가 용이하다.
Duck 서브클래스의 정의만 보고 오리들 사이의 행동 차이를 구분하기 용이하다.(fly, quack 구분 가능)

단점: 인터페이스는 구현 코드가 없으므로 코드의 재사용을 할 수 없다.(quack, fly 다 적어줘야됨)
Duck 서브클래스에서 코드가 중복된다.(단점 1번과 비슷)
오리 행위의 변경이 하나 이상의 Duck 서브클래스에 영향을 미칠 수 있다.

코드를 만들 때 재사용이 용이하고 유지보수 가능한지 판단하는 것이 중요하다.
디자인이 가지고 있는 장단점 분석하는 것이 중요하다.

퀴즈3
quack과 fly는 분리될 필요가 있다.

퀴즈4
subclass에 있는 fly와 quack이 분리될 필요가 있다. 캡슐화시켜야한다.
변화되는 요인 찾기 -> 감싼다


